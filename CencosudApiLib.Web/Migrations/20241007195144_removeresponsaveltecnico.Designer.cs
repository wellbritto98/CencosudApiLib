// <auto-generated />
using System;
using CencosudApiLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CencosudApiLib.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241007195144_removeresponsaveltecnico")]
    partial class removeresponsaveltecnico
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CencosudApiLib.Models.Api", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponsavelTecnico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("CencosudApiLib.Models.ApiInstance", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ApiId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("ProjectId", "ApiId");

                    b.HasIndex("ApiId");

                    b.ToTable("ApiInstances");
                });

            modelBuilder.Entity("CencosudApiLib.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "33c4e333-c141-48eb-81d8-a98cd61880a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9686dffa-879a-422a-b0c0-c7156702b33f",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEGqyFKMmxMr/3BB6K3c3Qir//qCyUDTkJc4cVQdLRZ2gyJjSt6MBQfH4lnZ9eTquhA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 42, 926, DateTimeKind.Local).AddTicks(6351),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "5ae5719b-cab5-427e-9fa3-469e1dc41035",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73fdd49a-172a-4f0c-aec5-eb1a9daf366f",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEPRebsZBeQ0zrCsXKpg+fI7+33Jzj0UKLOv5VBL6cJi2eoCYLfVMXrrFfgiaabQXzw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 42, 993, DateTimeKind.Local).AddTicks(1623),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "c2328c59-a5db-4756-8800-512bf17ab76a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b8ee84a-5f66-484f-850c-a45ea571936f",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEM12iCDW35rTfla+NfRjMwwsS37plWc3iieRXh0BJpTck74B/JRXFwFPOo1Dj6N0QA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 63, DateTimeKind.Local).AddTicks(6962),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "0483e647-701b-4930-a3a6-8cca99d8ed3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd61cafb-7ea9-4258-a7ff-3cd47939a513",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAENu5QUQirZuLVk28nPp/6E4aYIqGjuCNn+QQEnjvUeIi+gambIvNQDLEG4TSUHoNBg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 148, DateTimeKind.Local).AddTicks(5669),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "da20ee8d-2d64-4b94-9eb4-f0aadefd8d9e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5afc995f-a4e2-43b8-be68-f246a0e4394d",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAED1oBwfgNojwz+whPnFxQoYjDB31jbDB8RxtKMH+6GsOf9LDJy3nAqGpr16Z4+vIng==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 215, DateTimeKind.Local).AddTicks(2810),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "542e2ebd-0d5a-4211-bf9c-550057de0fad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee72b6f9-ccb5-44f0-b43e-229bed3b1a19",
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+wr49EJfGXgj4Fsqj7KYmvHqNZ1Hm7Gexgn2DNDn+19p2umLLlspzeoac53yOTJw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 288, DateTimeKind.Local).AddTicks(6169),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "e8e408b5-86b5-424f-b8df-ca946ba83970",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75c3c1ed-4b2d-4044-875d-dd369792b3ec",
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEDxd2SyVILB99QU1Kq57ypDKJ4pyvtSooIHWMMMw4HF/FODQqEs2lHqx3Z0MDS+aBA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 352, DateTimeKind.Local).AddTicks(8723),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "43207aee-2889-4ca4-a919-dbb663f9b209",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3dab08a-ff84-42e1-8a94-48d93984d5a3",
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEFd2mWYvh2a+v4zFMT35x52sCvo3xubGT2gUUwmD3q9xDIPBp3LSMmqa4la1nPQ0VQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 415, DateTimeKind.Local).AddTicks(3820),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "673ce8be-783a-4b8c-88ce-31cd11bcc76d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74494507-2686-47c3-a8a3-c014854426ef",
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEIdMM7sJdVFZyoJJKV9PJDZpDLhdhiaGlAF/aVKN75qEh8sPGOnG9KlYqBI8wlBKMA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 482, DateTimeKind.Local).AddTicks(2033),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "1a7c95b4-8851-4b28-987e-0c61feb77d1d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b2e8cd1-58d4-49f9-be28-168a312c39d9",
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkCAh0rJpB0LMiT2ZhA2C7hoB67bk0GW9Wz67PuBNTQc+d7CLbNaKe+0yIcUUneRA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 571, DateTimeKind.Local).AddTicks(1349),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = "373c7fea-0520-4308-8d37-f1770f117576",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c253fdd8-c77b-4ac9-b0e1-dd0ca02a280f",
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAELOZGTNMrhfdVLfFrWzdtFl33+IHw5sFt9P5ZpQlLxkJIVANsiCGwl/m0KNrqN9qZQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 654, DateTimeKind.Local).AddTicks(8566),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = "2cd94bcf-4883-4a30-b077-2f7bc91848ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4765c7ea-3458-434d-ade6-0247f8bb1abf",
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfWNnz9Cvz5CErxwK4t66bfTnp2RoAlElLM3V7r+JoFd1o9QCdU39pWiZ8rKctNGw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 7, 16, 51, 43, 726, DateTimeKind.Local).AddTicks(3942),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        });
                });

            modelBuilder.Entity("CencosudApiLib.Models.ComponentInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<int>("EndpointId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ComponentInstance");
                });

            modelBuilder.Entity("CencosudProjectLib.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "33c4e333-c141-48eb-81d8-a98cd61880a0",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "5ae5719b-cab5-427e-9fa3-469e1dc41035",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "c2328c59-a5db-4756-8800-512bf17ab76a",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "0483e647-701b-4930-a3a6-8cca99d8ed3c",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "da20ee8d-2d64-4b94-9eb4-f0aadefd8d9e",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "542e2ebd-0d5a-4211-bf9c-550057de0fad",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "e8e408b5-86b5-424f-b8df-ca946ba83970",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "43207aee-2889-4ca4-a919-dbb663f9b209",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "673ce8be-783a-4b8c-88ce-31cd11bcc76d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "1a7c95b4-8851-4b28-987e-0c61feb77d1d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "373c7fea-0520-4308-8d37-f1770f117576",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "2cd94bcf-4883-4a30-b077-2f7bc91848ed",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CencosudApiLib.Models.Api", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CencosudApiLib.Models.ApiInstance", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Api", "Api")
                        .WithMany("ApiInstances")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CencosudProjectLib.Models.Project", "Project")
                        .WithMany("ApiInstances")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Api");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CencosudApiLib.Models.Api", b =>
                {
                    b.Navigation("ApiInstances");
                });

            modelBuilder.Entity("CencosudProjectLib.Models.Project", b =>
                {
                    b.Navigation("ApiInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
