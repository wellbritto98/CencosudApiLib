// <auto-generated />
using System;
using CencosudApiLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CencosudApiLib.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241022200650_virtualcollections")]
    partial class virtualcollections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CencosudApiLib.Models.Api", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Apis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUrl = "https://auth.api.com",
                            Description = "API for user authentication",
                            IsDeleted = false,
                            Name = "Authentication API",
                            Version = "v1.0"
                        },
                        new
                        {
                            Id = 2,
                            BaseUrl = "https://payment.api.com",
                            Description = "API for payment processing",
                            IsDeleted = false,
                            Name = "Payment API",
                            Version = "v2.1"
                        },
                        new
                        {
                            Id = 3,
                            BaseUrl = "https://notify.api.com",
                            Description = "API for sending notifications",
                            IsDeleted = false,
                            Name = "Notification API",
                            Version = "v1.3"
                        });
                });

            modelBuilder.Entity("CencosudApiLib.Models.ApiInstance", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ApiId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("ProjectId", "ApiId");

                    b.HasIndex("ApiId");

                    b.ToTable("ApiInstances");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ApiId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            ProjectId = 1,
                            ApiId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            ProjectId = 2,
                            ApiId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            ProjectId = 2,
                            ApiId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            ProjectId = 3,
                            ApiId = 3,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CencosudApiLib.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0c62881e-ba00-4c93-97df-debbd2be7d47",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e98c309a-a583-4924-975a-f317763a9988",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpGLui5PLEbXTi2RYADLcsJjPGqjq8XmcZc3/X2CSUrqj/wIsRTxCUbmk0aFyQ1YA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 48, 795, DateTimeKind.Local).AddTicks(5544),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "b78ea2e3-fbf9-46e7-b141-c55d8f1cf624",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71805d63-0d44-4b66-b94e-2fcfbe0be4db",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAELuNhRlYEoI5cpBEzOmOkdjTBJBwgyfS1WgF+BPdMr6JM4HfaJPPyhtxaeVJR+Yl7g==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 48, 853, DateTimeKind.Local).AddTicks(8650),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "8a1ea4d9-679b-4c9d-aa3e-73bf2231a0a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d39ccf9a-94f8-4f6c-9633-0aec4c3ebc4b",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAELB/fA46xgZDmasA2apNAPZS93dcHPHlH2XbJo4k62q5ABVryckfHzV8JK+F3qETgA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 48, 915, DateTimeKind.Local).AddTicks(615),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "08ff4386-4ffb-469b-8029-0c2c1b8d2731",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86db31fd-899c-48aa-99fc-afc2ba965775",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVMKAdCmsJ/d9sZ65CF1ajxv3QzPadGNnAZxmzZnom9jPxfw/B8DYdmUgR3R+dWbw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 48, 976, DateTimeKind.Local).AddTicks(4829),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "f6129a13-0886-4283-96ac-637f3ad40ced",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e80bdf61-5b7b-4dae-ad62-e603d8a9495a",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVNY/PE8dBCspmPX4hXzPTgglpBnxfZn6wiLsIuBt8nk/IZIavbOfqoKkXBxVKUlA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 47, DateTimeKind.Local).AddTicks(4275),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "049736d8-08dd-42e8-8f7f-0ccf33fda2a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d91c3bc-5f86-42e8-8caf-bc6b5e8f697d",
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEODNrb1NeiUU3wBTd4vlzY4bbbjM4l6v2rUg3rJSyf+AyF0M6X7T3LXyh4xiOBm2ug==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 105, DateTimeKind.Local).AddTicks(1111),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "b7f0c236-4ca9-4b41-89b1-8d4e7d537dd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b2597cc-e1da-4b9d-a841-abb7c900ee21",
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbj4VFlhUF/6jShopYJ2EiAdhnduChC0BVDavi/kTaBKTUD6TFgok+SozGPP0q2cA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 164, DateTimeKind.Local).AddTicks(283),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "25e4c653-a587-4631-94b8-3caad5eae89d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3ad313d-7473-48bc-8688-cc08b10ec268",
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEMBSy+1DnnYEUStEgxFt50lxP/GIzdawFS/68+ay175ZyR+r9CqgtgWF3oeDQAUYqg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 224, DateTimeKind.Local).AddTicks(7452),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "9559a1b1-58f3-42ba-a729-cb7afad6707a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a2a8261-b772-4f9a-a6da-90eaa298130e",
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEFc9G8owP6mDszzGxayhfRif2kcEeps4CUCVq65l0SposVb2AECLvzndH5Doaj4vAQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 281, DateTimeKind.Local).AddTicks(640),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "4b870b8a-0296-40a1-a784-515fb5510083",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af7dc4d6-08d2-4625-87b2-8659fe562b43",
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdUlIh/Y8+7QHnNfYEHhqAZTnMsYIrR62RkrjJHKZiBCQP9CQDc/IJ4GHCufQ7U+A==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 337, DateTimeKind.Local).AddTicks(4552),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = "a92fb399-8707-4bde-a85b-9216c852fbe4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "919317b8-7e00-47c9-8f09-07dcb0c38afd",
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEFOauU3MAf56xWfHBuMaCySDGKbNt9mP9KD6xsoHiIOBtcxbVNLFMKewp2b5CJdWnQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 396, DateTimeKind.Local).AddTicks(2244),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = "2123f97b-0e8a-41c9-b8da-9a4094c6ba7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2c5a935-5141-428e-89ca-0abee40f4337",
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEOY39Eoo0GIw0BZ/y4IZ/ZfnNZV3yhKrYhbWM+ZyUkhb8Xyk22JiEtF9qJI0LLiKOQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 22, 17, 6, 49, 453, DateTimeKind.Local).AddTicks(8105),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        });
                });

            modelBuilder.Entity("CencosudApiLib.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Login procedure",
                            IsDeleted = false,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Email validation",
                            IsDeleted = false,
                            Type = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "Authentication token generation",
                            IsDeleted = false,
                            Type = 5
                        });
                });

            modelBuilder.Entity("CencosudApiLib.Models.ComponentInstance", b =>
                {
                    b.Property<int>("EndpointId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("EndpointId", "ComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("ComponentInstance");

                    b.HasData(
                        new
                        {
                            EndpointId = 1,
                            ComponentId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            EndpointId = 1,
                            ComponentId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            EndpointId = 1,
                            ComponentId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            EndpointId = 2,
                            ComponentId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            EndpointId = 3,
                            ComponentId = 1,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CencosudApiLib.Models.Endpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.ToTable("Endpoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiId = 1,
                            Description = "User login endpoint",
                            IsDeleted = false,
                            Method = "POST",
                            Path = "/login"
                        },
                        new
                        {
                            Id = 2,
                            ApiId = 1,
                            Description = "User registration endpoint",
                            IsDeleted = false,
                            Method = "POST",
                            Path = "/register"
                        },
                        new
                        {
                            Id = 3,
                            ApiId = 2,
                            Description = "Payment charge endpoint",
                            IsDeleted = false,
                            Method = "POST",
                            Path = "/charge"
                        },
                        new
                        {
                            Id = 4,
                            ApiId = 3,
                            Description = "Send notification endpoint",
                            IsDeleted = false,
                            Method = "POST",
                            Path = "/send"
                        });
                });

            modelBuilder.Entity("CencosudProjectLib.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A platform for online shopping",
                            IsDeleted = false,
                            Name = "E-Commerce Platform",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Description = "System to manage internal APIs",
                            IsDeleted = false,
                            Name = "Internal API Management",
                            Status = "Development"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mobile application for managing orders",
                            IsDeleted = false,
                            Name = "Mobile App",
                            Status = "Testing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0c62881e-ba00-4c93-97df-debbd2be7d47",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "b78ea2e3-fbf9-46e7-b141-c55d8f1cf624",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8a1ea4d9-679b-4c9d-aa3e-73bf2231a0a1",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "08ff4386-4ffb-469b-8029-0c2c1b8d2731",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "f6129a13-0886-4283-96ac-637f3ad40ced",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "049736d8-08dd-42e8-8f7f-0ccf33fda2a0",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "b7f0c236-4ca9-4b41-89b1-8d4e7d537dd7",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "25e4c653-a587-4631-94b8-3caad5eae89d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "9559a1b1-58f3-42ba-a729-cb7afad6707a",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "4b870b8a-0296-40a1-a784-515fb5510083",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "a92fb399-8707-4bde-a85b-9216c852fbe4",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "2123f97b-0e8a-41c9-b8da-9a4094c6ba7f",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CencosudApiLib.Models.ApiInstance", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Api", "Api")
                        .WithMany("ApiInstances")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CencosudProjectLib.Models.Project", "Project")
                        .WithMany("ApiInstances")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Api");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CencosudApiLib.Models.ComponentInstance", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Component", "Component")
                        .WithMany("ComponentInstances")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CencosudApiLib.Models.Endpoint", "Endpoint")
                        .WithMany("ComponentInstances")
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("CencosudApiLib.Models.Endpoint", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Api", "Api")
                        .WithMany("Endpoints")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Api");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CencosudApiLib.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CencosudApiLib.Models.Api", b =>
                {
                    b.Navigation("ApiInstances");

                    b.Navigation("Endpoints");
                });

            modelBuilder.Entity("CencosudApiLib.Models.Component", b =>
                {
                    b.Navigation("ComponentInstances");
                });

            modelBuilder.Entity("CencosudApiLib.Models.Endpoint", b =>
                {
                    b.Navigation("ComponentInstances");
                });

            modelBuilder.Entity("CencosudProjectLib.Models.Project", b =>
                {
                    b.Navigation("ApiInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
